@model sc_web.Models.Chair.SmartChairModel
@{
    ViewBag.Title = "Smart Chair Data";
}

<h2>@Model.Name Smart Chair</h2>

<script>
        window.chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 192)',
            blue: 'rgb(54, 162, 235)',
            blueTrans: 'rgba(54, 162, 235, 0.3)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(201, 203, 207)'
        };
</script>

<div class="container-fluid h-100">
    <div class="row h-100">
        <aside class="col-12 col-md-2 p-0 bg-dark">
            <nav class="navbar navbar-expand navbar-dark bg-dark flex-md-column flex-row align-items-start py-2">
                <div class="collapse navbar-collapse">
                    <ul class="flex-md-column flex-row navbar-nav w-100 justify-content-between">
                        <li class="nav-item">
                            <a class="nav-link pl-0" data-toggle="collapse" data-parent="#chairDataGroup" href="#collapseOverview"><span data-feather="file"></span><span class="font-weight-bold pl-1">Overview</span></a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link pl-0" data-toggle="collapse" data-parent="#chairDataGroup" href="#collapsePosture"><span data-feather="user-check"></span><span class="font-weight-bold pl-1">Posture</span></a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link pl-0" data-toggle="collapse" data-parent="#chairDataGroup" href="#collapseHeart"><span data-feather="heart"></span><span class="font-weight-bold pl-1">Heart</span></a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link pl-0" data-toggle="collapse" data-parent="#chairDataGroup" href="#collapseMotion"><span data-feather="activity"></span><span class="font-weight-bold pl-1">Motion</span></a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link pl-0" data-toggle="collapse" data-parent="#chairDataGroup" href="#collapseSitting"><span data-feather="coffee"></span><span class="font-weight-bold pl-1">Sitting</span></a>
                        </li>
                    </ul>
                </div>
            </nav>
        </aside>
        <main class="col bg-faded py-3">

            @using (Html.BeginForm(null, null, FormMethod.Get, new { id = "selectorform" }))
            {
                <input id="WebKey" name="WebKey" type="hidden" value="@Model.WebKey">
                <input id="TimeRange" name="TimeRange" type="hidden">

                <button class="btn btn-sm btn-outline-secondary dropdown-toggle float-sm-right" id="timeSelectorBtn" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span data-feather="calendar"></span>
                    @ViewBag.RangeString
                </button>
                <div class="dropdown-menu">
                    <a class="dropdown-item" href="#" onclick="$('#TimeRange').val('today'); $('#selectorform').submit()">Today</a>
                    <a class="dropdown-item" href="#" onclick="$('#TimeRange').val('thisweek'); $('#selectorform').submit()">This Week</a>
                    <a class="dropdown-item" href="#" onclick="$('#TimeRange').val('thismonth'); $('#selectorform').submit()">This Month</a>
                </div>
            }


            <div id="chairDataGroup">
                <div class="collapse show" id="collapseOverview">
                    <h2>Overview</h2>
                    The dashboard shows the health data gathered over time. Use the menu at the left to choose the graph to view. Use the menu at the upper-right to choose the time period.

                    <br />
                    ------------------------------DEBUG DATA-----------------------------<br />
                    AuthKey: @Model.AuthKey <br />
                    WebKey: @Model.WebKey <br />
                    ChairName: @Model.Name <br />
                    Number of Heart Points: @Model.HeartSensorData.Count <br />
                    Number of Motion Points: @Model.MotionSensorData.Count <br />
                    Number of Posture Points: @Model.PostureSensorData.Count <br />
                    Number of Occupancy Points: @Model.OccupancySessionData.Count <br />
                    RangeStart: @ViewBag.RangeStart <br />
                    RangeEnd: @ViewBag.RangeEnd <br />
                </div>

                <div class="collapse" id="collapsePosture">
                    <h2>Posture</h2>
                    <canvas id="chartPosture"></canvas>
                </div>

                <div class="collapse" id="collapseHeart">
                    <h2>Heart</h2>
                    <canvas id="chartHeart"></canvas>
                </div>

                <div class="collapse" id="collapseMotion">
                    <h2>Motion</h2>
                    <canvas id="chartMotion"></canvas>
                </div>

                <div class="collapse" id="collapseSitting">
                    <h2>Sitting</h2>
                    <canvas id="chartSitting"></canvas>
                </div>
            </div>
        </main>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/feather")
    @Scripts.Render("~/bundles/chartsjs")

    <script>
        feather.replace()
    </script>

    <script>
        var $myGroup = $('#chairDataGroup');
        $myGroup.on('show.bs.collapse', '.collapse', function () {
            $myGroup.find('.collapse.show').collapse('hide');
        });
    </script>

    <script>
         /*Posture Bubble Chart Initialization*/
        var charPostureConfig = {
            type: 'bubble',
            data: {
                datasets: [{
                    label: ['Posture Data'],
                    data: [{
                        x: 100,
                        y: 0,
                        r: 10
                    }, {
                        x: 60,
                        y: 30,
                        r: 20
                    }, {
                        x: 40,
                        y: 60,
                        r: 25
                    }, {
                        x: 80,
                        y: 80,
                        r: 50
                    }, {
                        x: 20,
                        y: 30,
                        r: 25
                    }, {
                        x: 0,
                        y: 100,
                        r: 5
                    }],

                    backgroundColor: window.chartColors.blueTrans,
                    borderColor: window.chartColors.blue,
                }]
            },
            options: {
                aspectRatio: 1,
                legend: false,
                tooltips: false,

                elements: {
                    point: {
                        hoverBackgroundColor: 'transparent',

                        radius: function (context) {
                            var value = context.dataset.data[context.dataIndex];
                            var size = context.chart.width;
                            var base = Math.abs(value.v) / 1000;
                            return (size / 24) * base;
                        }
                    }
                }
            }
        };

        /*Heartrate Line Chart Initialization*/
        var chartHeartConfig = {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Heart Rate',
                    backgroundColor: window.chartColors.red,
                    borderColor: window.chartColors.red,
                    data: [
                         @foreach (var dataPoint in Model.HeartSensorData.Where(d => d.Timestamp >= ViewBag.RangeStart && d.Timestamp <= ViewBag.RangeEnd))
                         {
                             @Html.Raw($"{{x: '{dataPoint.Timestamp.ToString("o")}', y:'{dataPoint.MeasuredBPM}'}}");
                             @Html.Raw(",");
                         }
                    ],
                    fill: false,
                }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'Observed Heart Rate'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        type: 'time',
                        time: {
                            displayFormats: {
                                quarter: 'MMM YYYY'
                            }
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'BPM'
                        }
                    }]
                }
            }
        };

        /*Motion Line Chart Initialization*/
        var chartMotionConfig = {
            type: 'line',
            data: {
                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
                datasets: [{
                    label: 'My First dataset',
                    backgroundColor: window.chartColors.red,
                    borderColor: window.chartColors.red,
                    data: [
                        1,
                        2,
                        3,
                        4,
                        5
                    ],
                    fill: false,
                }, {
                    label: 'My Second dataset',
                    fill: false,
                    backgroundColor: window.chartColors.blue,
                    borderColor: window.chartColors.blue,
                    data: [
                        6,
                        7,
                        8,
                        9,
                        10
                    ],
                }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'Chart.js Line Chart'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false,
                },
                hover: {
                    mode: 'nearest',
                    intersect: true
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Month'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Value'
                        }
                    }]
                }
            }
        };

        /*Sitting Donut Chart Initialization*/
        var chartSittingConfig = {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: [
                        @{
                            var selectedPoints = Model.OccupancySessionData.Where(d => d.Timestamp >= ViewBag.RangeStart && d.Timestamp <= ViewBag.RangeEnd);

                            var tenMinutes = TimeSpan.FromMinutes(10);
                            var thirtyMinutes = TimeSpan.FromMinutes(30);
                            var oneHour = TimeSpan.FromHours(1);
                            var twoHours = TimeSpan.FromHours(2);
                         }
                        @selectedPoints.Count(d => d.ElapsedTimeMs < tenMinutes.TotalMilliseconds),
                        @selectedPoints.Count(d => d.ElapsedTimeMs >= tenMinutes.TotalMilliseconds && d.ElapsedTimeMs < thirtyMinutes.TotalMilliseconds),
                        @selectedPoints.Count(d => d.ElapsedTimeMs >= thirtyMinutes.TotalMilliseconds && d.ElapsedTimeMs < oneHour.TotalMilliseconds),
                        @selectedPoints.Count(d => d.ElapsedTimeMs >= oneHour.TotalMilliseconds && d.ElapsedTimeMs < twoHours.TotalMilliseconds),
                        @selectedPoints.Count(d => d.ElapsedTimeMs >= twoHours.TotalMilliseconds),
                    ],
                    backgroundColor: [
                        window.chartColors.green,
                        window.chartColors.blue,
                        window.chartColors.yellow,
                        window.chartColors.orange,
                        window.chartColors.red,
                    ],
                    label: 'Sitting Frequency'
                }],
                labels: [
                    '<10 Minutes',
                    '10-30 Minutes',
                    '30 Minutes - 1 Hour',
                    '1-2 Hours',
                    '>2 Hours'
                ]
            },
            options: {
                responsive: true,
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Sitting Frequency'
                },
                animation: {
                    animateScale: true,
                    animateRotate: true
                }
            }
        };

        window.onload = function () {
            var chartPostureCtx = document.getElementById('chartPosture').getContext('2d');
            new Chart(chartPostureCtx, charPostureConfig);

            var chartHeartCtx = document.getElementById('chartHeart').getContext('2d');
            new Chart(chartHeartCtx, chartHeartConfig);

            var chartMotionCtx = document.getElementById('chartMotion').getContext('2d');
            new Chart(chartMotionCtx, chartMotionConfig);

            var chartSittingCtx = document.getElementById('chartSitting').getContext('2d');
            new Chart(chartSittingCtx, chartSittingConfig);
        }
    </script>
}